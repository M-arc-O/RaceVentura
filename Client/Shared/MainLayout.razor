@using Client.Components
@using Client.Pages
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen.Blazor

@inherits LayoutComponentBase
@inject ThemeService ThemeService
@inject NavigationManager UriHelper
@inject DialogService DialogService

<RadzenDialog />

<RadzenLayout>
    <RadzenHeader>
        <ChildContent>
            <div class="row justify-content-start align-items-center">
                <div class="col-5 d-flex align-items-center">
                    <RadzenSidebarToggle Click="@(args => { sidebarExpanded = !sidebarExpanded; bodyExpanded = !bodyExpanded; })">
                    </RadzenSidebarToggle>
                    <RadzenButton Variant="Variant.Text" Shade="Shade.Darker" Click="@(_ => UriHelper.NavigateTo(""))">
                        <RadzenImage Path="Images/icon.png" Style="width: 50px; height: 50px;" />
                        <RadzenLabel Text="Race Ventura" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;" />
                    </RadzenButton>
                </div>
                <div class="col-7 d-flex align-items-center justify-content-end">
                    <RadzenDropDown class="mx-0 mx-lg-3" id="themes" style="width: 220px;" TValue="string" TextProperty="Text" ValueProperty="Value" Data="@ThemeService.Themes" Value="@ThemeService.CurrentTheme" Change="@ChangeTheme">
                        <ValueTemplate>
                            @context.Text Theme
                        </ValueTemplate>
                    </RadzenDropDown>

                    <AuthorizeView>
                        <Authorized>
                            <RadzenLink Path="/.auth/logout" Text="Sign out" Style="margin-right: 15px" />
                        </Authorized>
                        <NotAuthorized>
                            <RadzenButton Variant="Variant.Outlined" Click=@ShowLoginDialog Text="Sign in" Style="margin-right: 15px;" />
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        </ChildContent>
    </RadzenHeader>
    <RadzenBody @ref="@body0" @bind-Expanded="@bodyExpanded">
        <ChildContent>
            <RadzenContentContainer Name="main">
                @Body
            </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>
    <RadzenSidebar @ref="@sidebar0" @bind-Expanded="@sidebarExpanded" class="demos-sidebar" style="display: flex; flex-direction: column">
        <div style="flex: 1; overflow: auto">
            <NavMenu></NavMenu>
        </div>
    </RadzenSidebar>
</RadzenLayout>


@if (!rendered)
{
    <div class="rz-app-loading">
        <div class="logo-loading"></div>
    </div>
}

@code {
    RadzenSidebar? sidebar0;
    RadzenBody? body0;
    bool sidebarExpanded = true;
    bool bodyExpanded = false;
    bool rendered = true;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            rendered = false;
        }
    }

    async Task ShowLoginDialog()
    {
        await DialogService.OpenAsync("Sign in", ds =>
    @<div>
        <LoginProviders></LoginProviders>
    </div>
    , new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    void ChangeTheme(object value)
    {
        ThemeService.Change(UriHelper, value?.ToString() ?? throw new ArgumentNullException("Theme value may not be null."));
    }
}
